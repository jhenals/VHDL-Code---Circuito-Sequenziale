library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
--library work;
--use work.myconst.all;

entity TestBench is
   Generic (n:integer := 32); -- nbitin=8
end TestBench;

architecture MySim of TestBench is
component Circ is 
   --Generic (n : integer := nbitin);
     Port ( A : in STD_LOGIC_VECTOR (n-1 downto 0);
           B : in STD_LOGIC_VECTOR (n-1 downto 0);
           c1 : in STD_LOGIC;
           c0 : in STD_LOGIC;
           clk : in STD_LOGIC;
           usc : out STD_LOGIC_VECTOR (n downto 0));
end component;

signal IA, IB : std_logic_vector(n-1 downto 0);
signal Ic1, Ic0 : std_logic;
signal Iclk : std_logic := '0';
signal Ores :  std_logic_vector(n downto 0);
constant Tclk : time := 20ns;

begin
    Pclk: process begin --andamento temporale del clock
         wait for Tclk/2; -- duty cycle 50%
         Iclk <= not Iclk;
    end process;
  
   stim_process : process begin    --stimulus process
    wait for Tclk ;
        Ic1 <= '0'; Ic0 <= '0'; --   A-B
             gi: for i in -(2**(n-1)) to ((2**(n-1))-1) loop
                      IA <= conv_std_logic_vector(i,n);
                  gj: for j in -(2**(n-1)) to ((2**(n-1))-1) loop
                      IB <= conv_std_logic_vector(j,n); 
                      wait for Tclk;
                 end loop;
             end loop;
      end process;
      
 CUT: Circ port map( IA, IB, Ic1, Ic0, Iclk, Ores);

end MySim;
