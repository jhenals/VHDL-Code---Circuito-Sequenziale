library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_SIGNED.ALL;
--library work;
--use work.myconst.all;
--import files

entity Circ is
    Generic (n : integer := 32);
    Port ( A : in STD_LOGIC_VECTOR (n-1 downto 0);
           B : in STD_LOGIC_VECTOR (n-1 downto 0);
           c1 : in STD_LOGIC;
           c0 : in STD_LOGIC;
           clk : in STD_LOGIC;
           usc : out STD_LOGIC_VECTOR (n downto 0));
end Circ;

architecture Behavioral of Circ is
    signal RA, RB, tmpUsc : std_logic_vector(n downto 0);
    signal p, g, MuxA, MuxB : std_logic_vector(n downto 0);
    signal c : std_logic_vector (n+1 downto 0);
    signal one : std_logic_vector(n downto 0) := (0=>'1', others=> '0');
    signal sel : std_logic_vector (1 downto 0);
    
    begin
        Pclk: process(clk) begin
            if rising_edge(clk) then
                RA <= A(n-1)&A;
                RB <= B(n-1)&B;
                sel <= c1&c0;
                usc <= tmpUsc;
            end if;
        end process;
        
         Pinputs: process(RA,RB,sel)
           begin
               if sel = "00" then
                   MuxA <= RA;
                   MuxB <= RB;
               elsif sel = "01" then
                   MuxA <= RA;
                   MuxB <= not RB;
                elsif sel = "10" then
                   MuxA <= not RA;
                   MuxB <= RB;
                else --case '11'
                   MuxA <=  RA;
                   MuxB <=  RB;    
               end if;
            end process;
        
       p <= MuxA xor MuxB;
       g <= MuxA and MuxB;
       c(n+1 downto 1) <= g or (p and c(n downto 0));
       c(0) <= sel(0) xor sel(1);
   
        tmpUsc <= (not(p xor c(n downto 0)) + one)
                   when (sel(0)='1' and sel(1)='1') else 
                   (p xor c(n downto 0));
end Behavioral;
